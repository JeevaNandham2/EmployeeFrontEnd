{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeeva\\\\Downloads\\\\employeRegister\\\\employeelogin\\\\src\\\\pages\\\\employee\\\\UpdateUser.js\",\n  _s = $RefreshSig$();\nimport { Button, Form } from 'react-bootstrap';\nimport './UpdateUser.css';\nimport { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UpdateUser = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    department: \"\"\n  });\n\n  // Handle form input changes\n  const handleInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n\n  // Fetch employee data on component mount\n  useEffect(() => {\n    const fetchEmployee = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/api/employee/${id}`);\n        if (response.ok) {\n          const data = await response.json();\n          setFormData(data); // Set form data with fetched employee details\n        } else {\n          console.error(\"Failed to fetch employee data\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching user\", error.message);\n      }\n    };\n    fetchEmployee();\n  }, [id]);\n\n  // Handle form submission to update employee\n  const handleSubmit = async event => {\n    event.preventDefault(); // Prevent the page from reloading\n    try {\n      const response = await fetch(`http://localhost:8080/api/employee/${id}`, {\n        method: 'PUT',\n        // Use PUT or PATCH based on your API design\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      if (response.ok) {\n        console.log(\"Employee updated successfully!\");\n        navigate('/');\n      } else {\n        console.error(\"Failed to update employee\");\n      }\n    } catch (error) {\n      console.error(\"Error updating employee\", error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"center-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Employee\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formBasicName\",\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Enter Name\",\n          value: formData.name || \"\" // Ensure value is always a string\n          ,\n          onChange: handleInputChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formBasicEmail\",\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"email\",\n          name: \"email\",\n          placeholder: \"Enter email\",\n          value: formData.email || \"\" // Ensure value is always a string\n          ,\n          onChange: handleInputChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formBasicPhone\",\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          name: \"phone\",\n          placeholder: \"Enter phone number\",\n          value: formData.phone || \"\" // Ensure value is always a string\n          ,\n          onChange: handleInputChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formBasicDepartment\",\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          name: \"department\",\n          placeholder: \"Enter department\",\n          value: formData.department || \"\" // Ensure value is always a string\n          ,\n          onChange: handleInputChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        className: \"w-100\",\n        children: \"Edit Employee\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(UpdateUser, \"XAlrz5/Ar+7aexpCu3UPVcdI2HA=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = UpdateUser;\nexport default UpdateUser;\nvar _c;\n$RefreshReg$(_c, \"UpdateUser\");","map":{"version":3,"names":["Button","Form","useEffect","useState","useNavigate","useParams","jsxDEV","_jsxDEV","UpdateUser","_s","id","navigate","formData","setFormData","name","email","phone","department","handleInputChange","event","value","target","fetchEmployee","response","fetch","ok","data","json","console","error","message","handleSubmit","preventDefault","method","headers","body","JSON","stringify","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","Group","controlId","Control","type","placeholder","onChange","required","variant","_c","$RefreshReg$"],"sources":["C:/Users/jeeva/Downloads/employeRegister/employeelogin/src/pages/employee/UpdateUser.js"],"sourcesContent":["import { Button, Form } from 'react-bootstrap';\r\nimport './UpdateUser.css';\r\nimport { useEffect, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nconst UpdateUser = () => {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    const [formData, setFormData] = useState({\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        department: \"\"\r\n    });\r\n\r\n    // Handle form input changes\r\n    const handleInputChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    // Fetch employee data on component mount\r\n    useEffect(() => {\r\n        const fetchEmployee = async () => {\r\n            try {\r\n                const response = await fetch(`http://localhost:8080/api/employee/${id}`);\r\n                if (response.ok) {\r\n                    const data = await response.json();\r\n                    setFormData(data);  // Set form data with fetched employee details\r\n                } else {\r\n                    console.error(\"Failed to fetch employee data\");\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching user\", error.message);\r\n            }\r\n        };\r\n        fetchEmployee();\r\n    }, [id]);\r\n\r\n    // Handle form submission to update employee\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();  // Prevent the page from reloading\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/employee/${id}`, {\r\n                method: 'PUT',  // Use PUT or PATCH based on your API design\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(formData),\r\n            });\r\n            if (response.ok) {\r\n                console.log(\"Employee updated successfully!\");\r\n                navigate('/');\r\n            } else {\r\n                console.error(\"Failed to update employee\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error updating employee\", error.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"center-form\">\r\n            <h2>Edit Employee</h2>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group controlId=\"formBasicName\">\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        placeholder=\"Enter Name\"\r\n                        value={formData.name || \"\"}  // Ensure value is always a string\r\n                        onChange={handleInputChange}\r\n                        required\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Control\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        placeholder=\"Enter email\"\r\n                        value={formData.email || \"\"}  // Ensure value is always a string\r\n                        onChange={handleInputChange}\r\n                        required\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formBasicPhone\">\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        name=\"phone\"\r\n                        placeholder=\"Enter phone number\"\r\n                        value={formData.phone || \"\"}  // Ensure value is always a string\r\n                        onChange={handleInputChange}\r\n                        required\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formBasicDepartment\">\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        name=\"department\"\r\n                        placeholder=\"Enter department\"\r\n                        value={formData.department || \"\"}  // Ensure value is always a string\r\n                        onChange={handleInputChange}\r\n                        required\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Button variant=\"primary\" type=\"submit\" className=\"w-100\">\r\n                    Edit Employee\r\n                </Button>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UpdateUser;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}